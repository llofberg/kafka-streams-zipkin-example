version: "2"
services:

  zookeeper:
    hostname: zookeeper
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:5.0.0
    ports:
    - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      zk_id: "1"

  kafka:
    hostname: kafka
    container_name: kafka
    image: confluentinc/cp-kafka:5.0.0
    links:
    - zookeeper
    ports:
    - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_BROKER_ID: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"

  schema-registry:
    hostname: schema-registry
    container_name: schema-registry
    image: confluentinc/cp-schema-registry:5.0.0
    links:
    - kafka
    - zookeeper
    ports:
    - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry

  client:
    image: confluentinc/cp-kafka:5.0.0
    container_name: client
    depends_on:
    - kafka
    hostname: kafka-create-topics
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka:9092 1 20 && \
                       kafka-topics --create --topic itop --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 && \
                       kafka-topics --create --topic otop --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 && \
                       (java -cp /d/stream/target/stream-1.0-SNAPSHOT-shaded.jar io.lbg.brave.kafka.streams.example.TheStream&) &&
                       (java -cp /d/stream/target/stream-1.0-SNAPSHOT-shaded.jar io.lbg.brave.kafka.streams.example.TheClient&) &&
                       while true ; do sleep 1000 ; done'"
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    volumes:
    - .:/d

  mysql:
    image: openzipkin/zipkin-mysql
    container_name: mysql
    # Uncomment to expose the storage port for testing
    # ports:
    #   - 3306:3306
  storage:
    image: openzipkin/zipkin-elasticsearch6
    container_name: elasticsearch
    hostname: elasticsearch
    # Uncomment to expose the storage port for testing
    ports:
    - 9200:9200

  kibana:
    image: docker.elastic.co/kibana/kibana:6.3.0
    environment:
      SERVER_NAME: kibana
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
    - "5601:5601"

  # The zipkin process services the UI, and also exposes a POST endpoint that
  # instrumentation can send trace data to. Scribe is disabled by default.
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    # Environment settings are defined here https://github.com/openzipkin/zipkin/tree/1.19.0/zipkin-server#environment-variables
    environment:
    - STORAGE_TYPE=elasticsearch
    - ES_HOSTS=elasticsearch
    #- STORAGE_TYPE=mysql
    # Point the zipkin at the storage backend
    #- MYSQL_HOST=mysql
    # Uncomment to enable scribe
    # - SCRIBE_ENABLED=true
    # Uncomment to enable self-tracing
    # - SELF_TRACING_ENABLED=true
    # Uncomment to enable debug logging
    # - JAVA_OPTS=-Dlogging.level.zipkin=DEBUG -Dlogging.level.zipkin2=DEBUG
    ports:
    # Port used for the Zipkin UI and HTTP Api
    - 9411:9411
    # Uncomment if you set SCRIBE_ENABLED=true
    # - 9410:9410
    depends_on:
    - storage

  # Adds a cron to process spans since midnight every hour, and all spans each day
  # This data is served by http://192.168.99.100:8080/dependency
  #
  # For more details, see https://github.com/openzipkin/docker-zipkin-dependencies
  dependencies:
    image: openzipkin/zipkin-dependencies
    container_name: dependencies
    entrypoint: crond -f
    environment:
    - STORAGE_TYPE=elasticsearch
    - ES_HOSTS=elasticsearch
    # - STORAGE_TYPE=mysql
    # - MYSQL_HOST=mysql
    # Add the baked-in username and password for the zipkin-mysql image
    # - MYSQL_USER=zipkin
    # - MYSQL_PASS=zipkin
    # Uncomment to see dependency processing logs
    # - ZIPKIN_LOG_LEVEL=DEBUG
    # Uncomment to adjust memory used by the dependencies job
    # - JAVA_OPTS=-verbose:gc -Xms1G -Xmx1G
    depends_on:
    - storage

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
    - 9090:9090
    depends_on:
    - mysql
    volumes:
    - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
    - 3000:3000
    depends_on:
    - prometheus
    environment:
    - GF_AUTH_ANONYMOUS_ENABLED=true
    - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin

  setup_grafana_datasource:
    image: appropriate/curl
    container_name: setup_grafana_datasource
    depends_on:
    - grafana
    volumes:
    - ./prometheus/create-datasource-and-dashboard.sh:/create.sh:ro
    command: /create.sh

  web:
    image: vad1mo/hello-world-rest
    hostname: web
    ports:
    - "5050:5050"
